name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-18.04, windows-latest]

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 0
        # we need fetch-depth 0 so setuptools_scm can resolve tags
    - uses: actions/setup-python@v1
      name: Install Python
      with:
        python-version: '3.7'

    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==1.3.0

    - name: Setup cmake
      # for whatever reason, Windows can't find the cmake installed by python
      # we will hack around it for now
      if: startsWith(matrix.os, 'windows')
      uses: jwlawson/actions-setup-cmake@v1.0
      with:
        cmake-version: '3.16.3'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup msys2
      if: startsWith(matrix.os, 'windows')
      uses: numworks/setup-msys2@v1

    - name: Update pacman
      if: startsWith(matrix.os, 'windows')
      run: msys2do pacman -Syu --noconfirm

    - name: Install chiavdf dependencies
      if: startsWith(matrix.os, 'windows')
      run: msys2do pacman -S --noconfirm mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-openssl mingw-w64-x86_64-python mingw-w64-x86_64-gmp mingw-w64-x86_64-python-pip mingw-w64-x86_64-dlib mingw-w64-x86_64-python-pep517 git

    - name: Install Visual C++ for Python 2.7
      if: startsWith(matrix.os, 'windows')
      run: |
        choco install vcpython27 -f -y

    - name: Build source distribution
      if: startsWith(matrix.os, 'mac')
      run: |
        pip install pep517
        python -m pep517.build --source --out-dir dist .

    - name: Build wheel
      run: |
        python -m cibuildwheel --output-dir dist
      env:
        # build just python 3.7
        CIBW_BUILD: cp37-*
        # don't build i686 targets, can't seem to find cmake for these
        CIBW_SKIP: '*-manylinux_i686'
        # we need boost
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_BEFORE_BUILD_LINUX: curl -L https://github.com/Kitware/CMake/releases/download/v3.17.0/cmake-3.17.0-Linux-`uname -m`.sh > cmake.sh && yes | sh cmake.sh | cat && rm -f /usr/bin/cmake && yum -y install boost-devel gmp-devel && python -m pip install --upgrade pip && which cmake && cmake --version
        CIBW_BEFORE_BUILD_MACOS: brew install boost && python -m pip install --upgrade pip
        CIBW_BEFORE_BUILD_WINDOWS: python -m pip install --upgrade pip && cmake -G "MSYS Makefiles" .
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: py.test -v {project}/tests
        CIBW_ENVIRONMENT_LINUX: "PATH=/project/cmake-3.17.0-Linux-`uname -m`/bin:$PATH BUILD_VDF_CLIENT=N"
        CIBW_ENVIRONMENT_WINDOWS: "PATH=$PATH:'C:\\msys64\\mingw64\\bin' BUILD_VDF_CLIENT=N"

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: wheels
        path: ./dist
    - name: Install twine
      run: pip install twine
    - name: Publish distribution to Test PyPI
      env:
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.test_pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'dist/*'
    - name: Publish distribution to PyPI
      if: startsWith(github.event.ref, 'refs/tags')
      env:
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'dist/*'
