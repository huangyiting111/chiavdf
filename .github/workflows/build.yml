name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-18.04, windows-latest]

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 0
        # we need fetch-depth 0 so setuptools_scm can resolve tags
    - uses: actions/setup-python@v1
      name: Install Python
      with:
        python-version: '3.7'

    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==1.3.0

    - name: Checkout yasm 1.3.0
      if: startsWith(matrix.os, 'windows')
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        repository: yasm/yasm
        path: yasm
        ref: v1.3.0

    - name: Setup MSYS2
      # for whatever reason, Windows can't find the cmake installed by python
      # we will hack around it for now
      if: startsWith(matrix.os, 'windows')
      uses: numworks/setup-msys2@v1
      with:
        msystem: MINGW64
        update: true

    - name: Compile yasm
      if: startsWith(matrix.os, 'windows')
      uses: numworks/setup-msys2@v1
    - run: |
        msys2do yasm/./configure
        msys2do yasm/make
        msys2do yasm/make install

#        msys2do pacman --noconfirm --needed -U -S gmp-devel
#        msys2do pacman --noconfirm -U -S base-devel mingw-w64-x86_64-toolchain
#    - run: msys2do pacman --noconfirm -U mingw-w64-*-any.pkg.tar.x


#    - name: Install Visual C++ for Python 2.7
#      if: startsWith(matrix.os, 'windows')
#      run: |
#        choco install vcpython27 -f -y

    - name: Build source distribution
      if: startsWith(matrix.os, 'mac')
      run: |
        pip install pep517
        python -m pep517.build --source --out-dir dist .

    - name: Build wheel
      run: |
        python -m cibuildwheel --output-dir dist
      env:
        # build just python 3.7
        CIBW_BUILD: cp37-*
        # don't build i686 targets, can't seem to find cmake for these
        CIBW_SKIP: '*-manylinux_i686'
        # we need boost
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_BEFORE_BUILD_LINUX: curl -L https://github.com/Kitware/CMake/releases/download/v3.17.0/cmake-3.17.0-Linux-`uname -m`.sh > cmake.sh && yes | sh cmake.sh | cat && rm -f /usr/bin/cmake && yum -y install boost-devel gmp-devel && python -m pip install --upgrade pip && which cmake && cmake --version
        CIBW_BEFORE_BUILD_MACOS: brew install boost && python -m pip install --upgrade pip
        CIBW_BEFORE_BUILD_WINDOWS: python -m pip install --upgrade pip
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: py.test -v {project}/tests
        CIBW_ENVIRONMENT_LINUX: "PATH=/project/cmake-3.17.0-Linux-`uname -m`/bin:$PATH BUILD_VDF_CLIENT=N"

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: wheels
        path: ./dist
    - name: Install twine
      run: pip install twine
    - name: Publish distribution to Test PyPI
      env:
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.test_pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'dist/*'
    - name: Publish distribution to PyPI
      if: startsWith(github.event.ref, 'refs/tags')
      env:
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'dist/*'
